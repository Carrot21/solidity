/*
	This file is part of solidity.

	solidity is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	solidity is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with solidity.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <fstream>
#include <src/libfuzzer/libfuzzer_macro.h>
#include <test/tools/ossfuzz/protoToAbiV2.h>
#include <test/tools/evmoneRunner.h>
#include "abiV2FuzzerCommon.h"

using namespace dev::test::abiv2fuzzer;
using namespace external::evmone;
using namespace std;
using namespace dev;

#if 1
static uint64_t totalFailedTests = 0;
#endif

DEFINE_PROTO_FUZZER(Contract const& _input)
{
	ProtoConverter converter;
	EvmOneVM vm;
	string contract_source = converter.contractToString(_input);

	// Raw runtime byte code generated by solidity
	dev::bytes byteCode;
	// Hex encoded runtime bytecode
	std::string hexEncodedRuntimeCode;
	// Hex encoded input
	std::string hexEncodedInput;

	if (const char* dump_path = getenv("PROTO_FUZZER_DUMP_PATH"))
	{
		// With libFuzzer binary run this to generate the solidity source file x.sol from a proto input:
		// PROTO_FUZZER_DUMP_PATH=x.sol ./a.out proto-input
		ofstream of(dump_path);
		of.write(contract_source.data(), contract_source.size());
	}

	try
	{
		// Compile contract generated by the proto fuzzer
		SolidityExecutionFramework executionFramework;
		byteCode = executionFramework.compileContract(contract_source);
		Json::Value methodIdentifiers = executionFramework.getMethodIdentifiers();
		// Call the first function
		for (auto const& id : methodIdentifiers.getMemberNames())
		{
			hexEncodedInput = methodIdentifiers[id].asString();
			break;
		}
	}
	catch (...)
	{
#if 1
		totalFailedTests++;
		ofstream of("failed-abiv2/" + std::to_string(totalFailedTests));
		of.write(contract_source.data(), contract_source.size());
#endif
		return;
	}
	hexEncodedRuntimeCode = toHex(byteCode);
	// We always call the function f()
//	vm.execute(hexEncodedRuntimeCode, hexEncodedInput);
	return;
}